<?php

/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

  namespace Gedcomx\Atom {

    /**
     * The "atom:entry" element represents an individual entry, acting as a container for metadata and data associated with the entry.
     */
    class Entry extends \Gedcomx\Atom\ExtensibleElement  {
    
    
      /**
       * The author of the entry.
       */
      private $authors;
      /**
       * information about a category associated with an entry.
       */
      private $categories;
      /**
       * The confidence of the result, if this entry represents a search result.
       */
      private $confidence;
      /**
       * The content of the entry.
       */
      private $content;
      /**
       * information about a category associated with the entry
       */
      private $contributors;
      /**
       * a permanent, universally unique identifier for the entry.
       */
      private $id;
      /**
       * a reference from a entry to a Web resource.
       */
      private $links;
      /**
       * instant in time associated with an event early in the life cycle of the entry.
       */
      private $published;
      /**
       * information about rights held in and over the entry.
       */
      private $rights;
      /**
       * The relevance score.
       */
      private $score;
      /**
       * a human-readable title for the entry
       */
      private $title;
      /**
       * the most recent instant in time when the entry was modified in a way the publisher considers significant.
       */
      private $updated;

      /**
       * Constructs a Entry from a (parsed) JSON hash
       */
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
      
      /**
       * The author of the entry.
       */
      public function getAuthors() {
        return $this->authors;
      }
      
      /**
       * The author of the entry.
       */
      public function setAuthors($authors) {
        $this->authors = $authors;
      }
      /**
       * information about a category associated with an entry.
       */
      public function getCategories() {
        return $this->categories;
      }
      
      /**
       * information about a category associated with an entry.
       */
      public function setCategories($categories) {
        $this->categories = $categories;
      }
      /**
       * The confidence of the result, if this entry represents a search result.
       */
      public function getConfidence() {
        return $this->confidence;
      }
      
      /**
       * The confidence of the result, if this entry represents a search result.
       */
      public function setConfidence($confidence) {
        $this->confidence = $confidence;
      }
      /**
       * The content of the entry.
       */
      public function getContent() {
        return $this->content;
      }
      
      /**
       * The content of the entry.
       */
      public function setContent($content) {
        $this->content = $content;
      }
      /**
       * information about a category associated with the entry
       */
      public function getContributors() {
        return $this->contributors;
      }
      
      /**
       * information about a category associated with the entry
       */
      public function setContributors($contributors) {
        $this->contributors = $contributors;
      }
      /**
       * a permanent, universally unique identifier for the entry.
       */
      public function getId() {
        return $this->id;
      }
      
      /**
       * a permanent, universally unique identifier for the entry.
       */
      public function setId($id) {
        $this->id = $id;
      }
      /**
       * a reference from a entry to a Web resource.
       */
      public function getLinks() {
        return $this->links;
      }
      
      /**
       * a reference from a entry to a Web resource.
       */
      public function setLinks($links) {
        $this->links = $links;
      }
      /**
       * instant in time associated with an event early in the life cycle of the entry.
       */
      public function getPublished() {
        return $this->published;
      }
      
      /**
       * instant in time associated with an event early in the life cycle of the entry.
       */
      public function setPublished($published) {
        $this->published = $published;
      }
      /**
       * information about rights held in and over the entry.
       */
      public function getRights() {
        return $this->rights;
      }
      
      /**
       * information about rights held in and over the entry.
       */
      public function setRights($rights) {
        $this->rights = $rights;
      }
      /**
       * The relevance score.
       */
      public function getScore() {
        return $this->score;
      }
      
      /**
       * The relevance score.
       */
      public function setScore($score) {
        $this->score = $score;
      }
      /**
       * a human-readable title for the entry
       */
      public function getTitle() {
        return $this->title;
      }
      
      /**
       * a human-readable title for the entry
       */
      public function setTitle($title) {
        $this->title = $title;
      }
      /**
       * the most recent instant in time when the entry was modified in a way the publisher considers significant.
       */
      public function getUpdated() {
        return $this->updated;
      }
      
      /**
       * the most recent instant in time when the entry was modified in a way the publisher considers significant.
       */
      public function setUpdated($updated) {
        $this->updated = $updated;
      }
      /**
       * Returns the associative array for this Entry
       */
      public function toArray() {
        $a = parent::toArray();
        if( $this->authors ) {
          $ab = array();
          foreach( $this->authors as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['authors'] = $ab;
        }
        if( $this->categories ) {
          $ab = array();
          foreach( $this->categories as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['categories'] = $ab;
        }
        if( $this->confidence ) {
          $a["confidence"] = $this->confidence;
        }
        if( $this->content ) {
          $a["content"] = $this->content->toArray();
        }
        if( $this->contributors ) {
          $ab = array();
          foreach( $this->contributors as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['contributors'] = $ab;
        }
        if( $this->id ) {
          $a["id"] = $this->id;
        }
        if( $this->links ) {
          $ab = array();
          foreach( $this->links as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['links'] = $ab;
        }
        if( $this->published ) {
          $a["published"] = $this->published;
        }
        if( $this->rights ) {
          $a["rights"] = $this->rights;
        }
        if( $this->score ) {
          $a["score"] = $this->score;
        }
        if( $this->title ) {
          $a["title"] = $this->title;
        }
        if( $this->updated ) {
          $a["updated"] = $this->updated;
        }
        return $a;
      }
      

      /**
       * Initializes this Entry from an associative array
       */
      public function initFromArray($o) {
        parent::initFromArray($o);
        $this->authors = array();
        if( isset($o['authors']) ) {
          foreach( $o['authors'] as $i => $x ) {
            $this->authors[$i] = new \Gedcomx\Atom\Person($x);
          }
        }
        $this->categories = array();
        if( isset($o['categories']) ) {
          foreach( $o['categories'] as $i => $x ) {
            $this->categories[$i] = new \Gedcomx\Atom\Category($x);
          }
        }
        if( isset($o['confidence']) ) {
          $this->confidence = $o["confidence"];
        }
        if( isset($o['content']) ) {
          $this->content = new \Gedcomx\Atom\Content($o["content"]);
        }
        $this->contributors = array();
        if( isset($o['contributors']) ) {
          foreach( $o['contributors'] as $i => $x ) {
            $this->contributors[$i] = new \Gedcomx\Atom\Person($x);
          }
        }
        if( isset($o['id']) ) {
          $this->id = $o["id"];
        }
        $this->links = array();
        if( isset($o['links']) ) {
          foreach( $o['links'] as $i => $x ) {
            $this->links[$i] = new \Gedcomx\Links\Link($x);
          }
        }
        if( isset($o['published']) ) {
          $this->published = $o["published"];
        }
        if( isset($o['rights']) ) {
          $this->rights = $o["rights"];
        }
        if( isset($o['score']) ) {
          $this->score = $o["score"];
        }
        if( isset($o['title']) ) {
          $this->title = $o["title"];
        }
        if( isset($o['updated']) ) {
          $this->updated = $o["updated"];
        }
      }
    
    }
    
  }

?>
