<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx\Conclusion;

/**
 * A form of a name.
 */
class NameForm extends \Gedcomx\Common\ExtensibleData
{

    /**
     * The language of the conclusion.
     *
     * @var string
     */
    private $lang;

    /**
     * The full text of the name form.
     *
     * @var string
     */
    private $fullText;

    /**
     * The different parts of the name form.
     *
     * @var \Gedcomx\Conclusion\NamePart[]
     */
    private $parts;

    /**
     * The references to the record fields being used as evidence.
     *
     * @var \Gedcomx\Records\Field[]
     */
    private $fields;

    /**
     * Constructs a NameForm from a (parsed) JSON hash
     *
     * @param array $o
     */
    public function __construct($o = null)
    {
        if ($o) {
            $this->initFromArray($o);
        }
    }

    /**
     * The language of the conclusion.
     *
     * @return string
     */
    public function getLang()
    {
        return $this->lang;
    }

    /**
     * The language of the conclusion.
     *
     * @param string $lang
     */
    public function setLang($lang)
    {
        $this->lang = $lang;
    }
    /**
     * The full text of the name form.
     *
     * @return string
     */
    public function getFullText()
    {
        return $this->fullText;
    }

    /**
     * The full text of the name form.
     *
     * @param string $fullText
     */
    public function setFullText($fullText)
    {
        $this->fullText = $fullText;
    }
    /**
     * The different parts of the name form.
     *
     * @return \Gedcomx\Conclusion\NamePart[]
     */
    public function getParts()
    {
        return $this->parts;
    }

    /**
     * The different parts of the name form.
     *
     * @param \Gedcomx\Conclusion\NamePart[] $parts
     */
    public function setParts($parts)
    {
        $this->parts = $parts;
    }
    /**
     * The references to the record fields being used as evidence.
     *
     * @return \Gedcomx\Records\Field[]
     */
    public function getFields()
    {
        return $this->fields;
    }

    /**
     * The references to the record fields being used as evidence.
     *
     * @param \Gedcomx\Records\Field[] $fields
     */
    public function setFields($fields)
    {
        $this->fields = $fields;
    }
    /**
     * Returns the associative array for this NameForm
     *
     * @return array
     */
    public function toArray()
    {
        $a = parent::toArray();
        if ($this->lang) {
            $a["lang"] = $this->lang;
        }
        if ($this->fullText) {
            $a["fullText"] = $this->fullText;
        }
        if ($this->parts) {
            $ab = array();
            foreach ($this->parts as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['parts'] = $ab;
        }
        if ($this->fields) {
            $ab = array();
            foreach ($this->fields as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['fields'] = $ab;
        }
        return $a;
    }


    /**
     * Initializes this NameForm from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        parent::initFromArray($o);
        if (isset($o['lang'])) {
            $this->lang = $o["lang"];
        }
        if (isset($o['fullText'])) {
                $this->fullText = $o["fullText"];
        }
        $this->parts = array();
        if (isset($o['parts'])) {
            foreach ($o['parts'] as $i => $x) {
                    $this->parts[$i] = new \Gedcomx\Conclusion\NamePart($x);
            }
        }
        $this->fields = array();
        if (isset($o['fields'])) {
            foreach ($o['fields'] as $i => $x) {
                    $this->fields[$i] = new \Gedcomx\Records\Field($x);
            }
        }
    }
}
