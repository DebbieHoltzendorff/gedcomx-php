<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx\Extensions\FamilySearch\Tree;

/**
 * The FamilySearch-proprietary model for a relationship between a child and a pair of parents.
 */
class ChildAndParentsRelationship extends \Gedcomx\Conclusion\Subject
{

    /**
     * The father of the child.
     *
     * @var \Gedcomx\Common\ResourceReference
     */
    private $father;

    /**
     * The mother of the child.
     *
     * @var \Gedcomx\Common\ResourceReference
     */
    private $mother;

    /**
     * child in the relationship.
     *
     * @var \Gedcomx\Common\ResourceReference
     */
    private $child;

    /**
     * The fact conclusions for the father.
     *
     * @var \Gedcomx\Conclusion\Fact[]
     */
    private $fatherFacts;

    /**
     * The fact conclusions for the mother.
     *
     * @var \Gedcomx\Conclusion\Fact[]
     */
    private $motherFacts;

    /**
     * Constructs a ChildAndParentsRelationship from a (parsed) JSON hash
     *
     * @param array $o
     */
    public function __construct($o = null)
    {
        if ($o) {
            $this->initFromArray($o);
        }
    }

    /**
     * The father of the child.
     *
     * @return \Gedcomx\Common\ResourceReference
     */
    public function getFather()
    {
        return $this->father;
    }

    /**
     * The father of the child.
     *
     * @param \Gedcomx\Common\ResourceReference $father
     */
    public function setFather($father)
    {
        $this->father = $father;
    }
    /**
     * The mother of the child.
     *
     * @return \Gedcomx\Common\ResourceReference
     */
    public function getMother()
    {
        return $this->mother;
    }

    /**
     * The mother of the child.
     *
     * @param \Gedcomx\Common\ResourceReference $mother
     */
    public function setMother($mother)
    {
        $this->mother = $mother;
    }
    /**
     * child in the relationship.
     *
     * @return \Gedcomx\Common\ResourceReference
     */
    public function getChild()
    {
        return $this->child;
    }

    /**
     * child in the relationship.
     *
     * @param \Gedcomx\Common\ResourceReference $child
     */
    public function setChild($child)
    {
        $this->child = $child;
    }
    /**
     * The fact conclusions for the father.
     *
     * @return \Gedcomx\Conclusion\Fact[]
     */
    public function getFatherFacts()
    {
        return $this->fatherFacts;
    }

    /**
     * The fact conclusions for the father.
     *
     * @param \Gedcomx\Conclusion\Fact[] $fatherFacts
     */
    public function setFatherFacts($fatherFacts)
    {
        $this->fatherFacts = $fatherFacts;
    }
    /**
     * The fact conclusions for the mother.
     *
     * @return \Gedcomx\Conclusion\Fact[]
     */
    public function getMotherFacts()
    {
        return $this->motherFacts;
    }

    /**
     * The fact conclusions for the mother.
     *
     * @param \Gedcomx\Conclusion\Fact[] $motherFacts
     */
    public function setMotherFacts($motherFacts)
    {
        $this->motherFacts = $motherFacts;
    }
    /**
     * Returns the associative array for this ChildAndParentsRelationship
     *
     * @return array
     */
    public function toArray()
    {
        $a = parent::toArray();
        if ($this->father) {
            $a["father"] = $this->father->toArray();
        }
        if ($this->mother) {
            $a["mother"] = $this->mother->toArray();
        }
        if ($this->child) {
            $a["child"] = $this->child->toArray();
        }
        if ($this->fatherFacts) {
            $ab = array();
            foreach ($this->fatherFacts as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['fatherFacts'] = $ab;
        }
        if ($this->motherFacts) {
            $ab = array();
            foreach ($this->motherFacts as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['motherFacts'] = $ab;
        }
        return $a;
    }


    /**
     * Initializes this ChildAndParentsRelationship from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        parent::initFromArray($o);
        if (isset($o['father'])) {
                $this->father = new \Gedcomx\Common\ResourceReference($o["father"]);
        }
        if (isset($o['mother'])) {
                $this->mother = new \Gedcomx\Common\ResourceReference($o["mother"]);
        }
        if (isset($o['child'])) {
                $this->child = new \Gedcomx\Common\ResourceReference($o["child"]);
        }
        $this->fatherFacts = array();
        if (isset($o['fatherFacts'])) {
            foreach ($o['fatherFacts'] as $i => $x) {
                    $this->fatherFacts[$i] = new \Gedcomx\Conclusion\Fact($x);
            }
        }
        $this->motherFacts = array();
        if (isset($o['motherFacts'])) {
            foreach ($o['motherFacts'] as $i => $x) {
                    $this->motherFacts[$i] = new \Gedcomx\Conclusion\Fact($x);
            }
        }
    }
}
