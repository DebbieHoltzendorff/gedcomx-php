<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx\Extensions\FamilySearch\Tree;

/**
 * 
 */
class Merge
{

    /**
     * List of resources to remove from the survivor person.
     *
     * @var \Gedcomx\Common\ResourceReference[]
     */
    private $resourcesToDelete;

    /**
     * List of resources to copy from the duplicate person to survivor person.
     *
     * @var \Gedcomx\Common\ResourceReference[]
     */
    private $resourcesToCopy;

    /**
     * Constructs a Merge from a (parsed) JSON hash
     *
     * @param array $o
     */
    public function __construct($o = null)
    {
        if ($o) {
            $this->initFromArray($o);
        }
    }

    /**
     * List of resources to remove from the survivor person.
     *
     * @return \Gedcomx\Common\ResourceReference[]
     */
    public function getResourcesToDelete()
    {
        return $this->resourcesToDelete;
    }

    /**
     * List of resources to remove from the survivor person.
     *
     * @param \Gedcomx\Common\ResourceReference[] $resourcesToDelete
     */
    public function setResourcesToDelete($resourcesToDelete)
    {
        $this->resourcesToDelete = $resourcesToDelete;
    }
    /**
     * List of resources to copy from the duplicate person to survivor person.
     *
     * @return \Gedcomx\Common\ResourceReference[]
     */
    public function getResourcesToCopy()
    {
        return $this->resourcesToCopy;
    }

    /**
     * List of resources to copy from the duplicate person to survivor person.
     *
     * @param \Gedcomx\Common\ResourceReference[] $resourcesToCopy
     */
    public function setResourcesToCopy($resourcesToCopy)
    {
        $this->resourcesToCopy = $resourcesToCopy;
    }
    /**
     * Returns the associative array for this Merge
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->resourcesToDelete) {
            $ab = array();
            foreach ($this->resourcesToDelete as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['resourcesToDelete'] = $ab;
        }
        if ($this->resourcesToCopy) {
            $ab = array();
            foreach ($this->resourcesToCopy as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['resourcesToCopy'] = $ab;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this Merge
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this Merge from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        $this->resourcesToDelete = array();
        if (isset($o['resourcesToDelete'])) {
            foreach ($o['resourcesToDelete'] as $i => $x) {
                    $this->resourcesToDelete[$i] = new \Gedcomx\Common\ResourceReference($x);
            }
        }
        $this->resourcesToCopy = array();
        if (isset($o['resourcesToCopy'])) {
            foreach ($o['resourcesToCopy'] as $i => $x) {
                    $this->resourcesToCopy[$i] = new \Gedcomx\Common\ResourceReference($x);
            }
        }
    }
}
