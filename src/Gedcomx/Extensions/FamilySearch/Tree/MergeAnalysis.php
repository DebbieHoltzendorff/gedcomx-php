<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx\Extensions\FamilySearch\Tree;

/**
 * 
 */
class MergeAnalysis
{

    /**
     * (no documentation provided)
     *
     * @var \Gedcomx\Common\ResourceReference[]
     */
    private $survivorResources;

    /**
     * (no documentation provided)
     *
     * @var \Gedcomx\Common\ResourceReference[]
     */
    private $duplicateResources;

    /**
     * (no documentation provided)
     *
     * @var \Gedcomx\Extensions\FamilySearch\Tree\MergeConflict[]
     */
    private $conflictingResources;

    /**
     * (no documentation provided)
     *
     * @var \Gedcomx\Common\ResourceReference
     */
    private $survivor;

    /**
     * (no documentation provided)
     *
     * @var \Gedcomx\Common\ResourceReference
     */
    private $duplicate;

    /**
     * Constructs a MergeAnalysis from a (parsed) JSON hash
     *
     * @param array $o
     */
    public function __construct($o = null)
    {
        if ($o) {
            $this->initFromArray($o);
        }
    }

    /**
     * (no documentation provided)
     *
     * @return \Gedcomx\Common\ResourceReference[]
     */
    public function getSurvivorResources()
    {
        return $this->survivorResources;
    }

    /**
     * (no documentation provided)
     *
     * @param \Gedcomx\Common\ResourceReference[] $survivorResources
     */
    public function setSurvivorResources($survivorResources)
    {
        $this->survivorResources = $survivorResources;
    }
    /**
     * (no documentation provided)
     *
     * @return \Gedcomx\Common\ResourceReference[]
     */
    public function getDuplicateResources()
    {
        return $this->duplicateResources;
    }

    /**
     * (no documentation provided)
     *
     * @param \Gedcomx\Common\ResourceReference[] $duplicateResources
     */
    public function setDuplicateResources($duplicateResources)
    {
        $this->duplicateResources = $duplicateResources;
    }
    /**
     * (no documentation provided)
     *
     * @return \Gedcomx\Extensions\FamilySearch\Tree\MergeConflict[]
     */
    public function getConflictingResources()
    {
        return $this->conflictingResources;
    }

    /**
     * (no documentation provided)
     *
     * @param \Gedcomx\Extensions\FamilySearch\Tree\MergeConflict[] $conflictingResources
     */
    public function setConflictingResources($conflictingResources)
    {
        $this->conflictingResources = $conflictingResources;
    }
    /**
     * (no documentation provided)
     *
     * @return \Gedcomx\Common\ResourceReference
     */
    public function getSurvivor()
    {
        return $this->survivor;
    }

    /**
     * (no documentation provided)
     *
     * @param \Gedcomx\Common\ResourceReference $survivor
     */
    public function setSurvivor($survivor)
    {
        $this->survivor = $survivor;
    }
    /**
     * (no documentation provided)
     *
     * @return \Gedcomx\Common\ResourceReference
     */
    public function getDuplicate()
    {
        return $this->duplicate;
    }

    /**
     * (no documentation provided)
     *
     * @param \Gedcomx\Common\ResourceReference $duplicate
     */
    public function setDuplicate($duplicate)
    {
        $this->duplicate = $duplicate;
    }
    /**
     * Returns the associative array for this MergeAnalysis
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->survivorResources) {
            $ab = array();
            foreach ($this->survivorResources as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['survivorResources'] = $ab;
        }
        if ($this->duplicateResources) {
            $ab = array();
            foreach ($this->duplicateResources as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['duplicateResources'] = $ab;
        }
        if ($this->conflictingResources) {
            $ab = array();
            foreach ($this->conflictingResources as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['conflictingResources'] = $ab;
        }
        if ($this->survivor) {
            $a["survivor"] = $this->survivor->toArray();
        }
        if ($this->duplicate) {
            $a["duplicate"] = $this->duplicate->toArray();
        }
        return $a;
    }

    /**
     * Returns the JSON string for this MergeAnalysis
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this MergeAnalysis from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        $this->survivorResources = array();
        if (isset($o['survivorResources'])) {
            foreach ($o['survivorResources'] as $i => $x) {
                    $this->survivorResources[$i] = new \Gedcomx\Common\ResourceReference($x);
            }
        }
        $this->duplicateResources = array();
        if (isset($o['duplicateResources'])) {
            foreach ($o['duplicateResources'] as $i => $x) {
                    $this->duplicateResources[$i] = new \Gedcomx\Common\ResourceReference($x);
            }
        }
        $this->conflictingResources = array();
        if (isset($o['conflictingResources'])) {
            foreach ($o['conflictingResources'] as $i => $x) {
                    $this->conflictingResources[$i] = new \Gedcomx\Extensions\FamilySearch\Tree\MergeConflict($x);
            }
        }
        if (isset($o['survivor'])) {
                $this->survivor = new \Gedcomx\Common\ResourceReference($o["survivor"]);
        }
        if (isset($o['duplicate'])) {
                $this->duplicate = new \Gedcomx\Common\ResourceReference($o["duplicate"]);
        }
    }
}
