<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx;

/**
 * <p>The GEDCOM X data formats define the serialization formats of the GEDCOM X conceptual model. The canonical documentation
     * is provided by the formal specification documents:</p>
     * 
     * <ul>
     * <li><a href="https://github.com/FamilySearch/gedcomx/blob/master/specifications/conceptual-model-specification.md">The GEDCOM X Conceptual Model, Version 1.0</a></li>
     * <li><a href="https://github.com/FamilySearch/gedcomx/blob/master/specifications/json-format-specification.md">The GEDCOM X JSON Format, Version 1.0</a></li>
     * <li><a href="https://github.com/FamilySearch/gedcomx/blob/master/specifications/xml-format-specification.md">The GEDCOM X XML Format, Version 1.0</a></li>
     * </ul>
     * 
     * <p>This documentation is provided as a non-normative reference guide.</p>
 */
class Gedcomx extends \Gedcomx\Links\HypermediaEnabledData
{

    /**
     * The language of the genealogical data.
     *
     * @var string
     */
    private $lang;

    /**
     * A reference to a description of this data set.
     *
     * @var string
     */
    private $descriptionRef;

    /**
     * A reference to the profile that describes this data set.
     *
     * @var string
     */
    private $profile;

    /**
     * The attribution of this genealogical data.
     *
     * @var \Gedcomx\Common\Attribution
     */
    private $attribution;

    /**
     * The persons included in this genealogical data set.
     *
     * @var \Gedcomx\Conclusion\Person[]
     */
    private $persons;

    /**
     * The relationships included in this genealogical data set.
     *
     * @var \Gedcomx\Conclusion\Relationship[]
     */
    private $relationships;

    /**
     * The descriptions of sources included in this genealogical data set.
     *
     * @var \Gedcomx\Source\SourceDescription[]
     */
    private $sourceDescriptions;

    /**
     * The agents included in this genealogical data set.
     *
     * @var \Gedcomx\Agent\Agent[]
     */
    private $agents;

    /**
     * The events included in this genealogical data set.
     *
     * @var \Gedcomx\Conclusion\Event[]
     */
    private $events;

    /**
     * The places included in this genealogical data set.
     *
     * @var \Gedcomx\Conclusion\PlaceDescription[]
     */
    private $places;

    /**
     * The documents included in this genealogical data set.
     *
     * @var \Gedcomx\Conclusion\Document[]
     */
    private $documents;

    /**
     * The collections included in this genealogical data set.
     *
     * @var \Gedcomx\Records\Collection[]
     */
    private $collections;

    /**
     * The extracted fields included in this genealogical data set.
     *
     * @var \Gedcomx\Records\Field[]
     */
    private $fields;

    /**
     * The record descriptors included in this genealogical data set.
     *
     * @var \Gedcomx\Records\RecordDescriptor[]
     */
    private $recordDescriptors;

    /**
     * Constructs a Gedcomx from a (parsed) JSON hash
     *
     * @param array $o
     */
    public function __construct($o = null)
    {
        if ($o) {
            $this->initFromArray($o);
        }
    }

    /**
     * The language of the genealogical data.
     *
     * @return string
     */
    public function getLang()
    {
        return $this->lang;
    }

    /**
     * The language of the genealogical data.
     *
     * @param string $lang
     */
    public function setLang($lang)
    {
        $this->lang = $lang;
    }
    /**
     * A reference to a description of this data set.
     *
     * @return string
     */
    public function getDescriptionRef()
    {
        return $this->descriptionRef;
    }

    /**
     * A reference to a description of this data set.
     *
     * @param string $descriptionRef
     */
    public function setDescriptionRef($descriptionRef)
    {
        $this->descriptionRef = $descriptionRef;
    }
    /**
     * A reference to the profile that describes this data set.
     *
     * @return string
     */
    public function getProfile()
    {
        return $this->profile;
    }

    /**
     * A reference to the profile that describes this data set.
     *
     * @param string $profile
     */
    public function setProfile($profile)
    {
        $this->profile = $profile;
    }
    /**
     * The attribution of this genealogical data.
     *
     * @return \Gedcomx\Common\Attribution
     */
    public function getAttribution()
    {
        return $this->attribution;
    }

    /**
     * The attribution of this genealogical data.
     *
     * @param \Gedcomx\Common\Attribution $attribution
     */
    public function setAttribution($attribution)
    {
        $this->attribution = $attribution;
    }
    /**
     * The persons included in this genealogical data set.
     *
     * @return \Gedcomx\Conclusion\Person[]
     */
    public function getPersons()
    {
        return $this->persons;
    }

    /**
     * The persons included in this genealogical data set.
     *
     * @param \Gedcomx\Conclusion\Person[] $persons
     */
    public function setPersons($persons)
    {
        $this->persons = $persons;
    }
    /**
     * The relationships included in this genealogical data set.
     *
     * @return \Gedcomx\Conclusion\Relationship[]
     */
    public function getRelationships()
    {
        return $this->relationships;
    }

    /**
     * The relationships included in this genealogical data set.
     *
     * @param \Gedcomx\Conclusion\Relationship[] $relationships
     */
    public function setRelationships($relationships)
    {
        $this->relationships = $relationships;
    }
    /**
     * The descriptions of sources included in this genealogical data set.
     *
     * @return \Gedcomx\Source\SourceDescription[]
     */
    public function getSourceDescriptions()
    {
        return $this->sourceDescriptions;
    }

    /**
     * The descriptions of sources included in this genealogical data set.
     *
     * @param \Gedcomx\Source\SourceDescription[] $sourceDescriptions
     */
    public function setSourceDescriptions($sourceDescriptions)
    {
        $this->sourceDescriptions = $sourceDescriptions;
    }
    /**
     * The agents included in this genealogical data set.
     *
     * @return \Gedcomx\Agent\Agent[]
     */
    public function getAgents()
    {
        return $this->agents;
    }

    /**
     * The agents included in this genealogical data set.
     *
     * @param \Gedcomx\Agent\Agent[] $agents
     */
    public function setAgents($agents)
    {
        $this->agents = $agents;
    }
    /**
     * The events included in this genealogical data set.
     *
     * @return \Gedcomx\Conclusion\Event[]
     */
    public function getEvents()
    {
        return $this->events;
    }

    /**
     * The events included in this genealogical data set.
     *
     * @param \Gedcomx\Conclusion\Event[] $events
     */
    public function setEvents($events)
    {
        $this->events = $events;
    }
    /**
     * The places included in this genealogical data set.
     *
     * @return \Gedcomx\Conclusion\PlaceDescription[]
     */
    public function getPlaces()
    {
        return $this->places;
    }

    /**
     * The places included in this genealogical data set.
     *
     * @param \Gedcomx\Conclusion\PlaceDescription[] $places
     */
    public function setPlaces($places)
    {
        $this->places = $places;
    }
    /**
     * The documents included in this genealogical data set.
     *
     * @return \Gedcomx\Conclusion\Document[]
     */
    public function getDocuments()
    {
        return $this->documents;
    }

    /**
     * The documents included in this genealogical data set.
     *
     * @param \Gedcomx\Conclusion\Document[] $documents
     */
    public function setDocuments($documents)
    {
        $this->documents = $documents;
    }
    /**
     * The collections included in this genealogical data set.
     *
     * @return \Gedcomx\Records\Collection[]
     */
    public function getCollections()
    {
        return $this->collections;
    }

    /**
     * The collections included in this genealogical data set.
     *
     * @param \Gedcomx\Records\Collection[] $collections
     */
    public function setCollections($collections)
    {
        $this->collections = $collections;
    }
    /**
     * The extracted fields included in this genealogical data set.
     *
     * @return \Gedcomx\Records\Field[]
     */
    public function getFields()
    {
        return $this->fields;
    }

    /**
     * The extracted fields included in this genealogical data set.
     *
     * @param \Gedcomx\Records\Field[] $fields
     */
    public function setFields($fields)
    {
        $this->fields = $fields;
    }
    /**
     * The record descriptors included in this genealogical data set.
     *
     * @return \Gedcomx\Records\RecordDescriptor[]
     */
    public function getRecordDescriptors()
    {
        return $this->recordDescriptors;
    }

    /**
     * The record descriptors included in this genealogical data set.
     *
     * @param \Gedcomx\Records\RecordDescriptor[] $recordDescriptors
     */
    public function setRecordDescriptors($recordDescriptors)
    {
        $this->recordDescriptors = $recordDescriptors;
    }
    /**
     * Returns the associative array for this Gedcomx
     *
     * @return array
     */
    public function toArray()
    {
        $a = parent::toArray();
        if ($this->lang) {
            $a["lang"] = $this->lang;
        }
        if ($this->descriptionRef) {
            $a["description"] = $this->descriptionRef;
        }
        if ($this->profile) {
            $a["profile"] = $this->profile;
        }
        if ($this->attribution) {
            $a["attribution"] = $this->attribution->toArray();
        }
        if ($this->persons) {
            $ab = array();
            foreach ($this->persons as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['persons'] = $ab;
        }
        if ($this->relationships) {
            $ab = array();
            foreach ($this->relationships as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['relationships'] = $ab;
        }
        if ($this->sourceDescriptions) {
            $ab = array();
            foreach ($this->sourceDescriptions as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['sourceDescriptions'] = $ab;
        }
        if ($this->agents) {
            $ab = array();
            foreach ($this->agents as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['agents'] = $ab;
        }
        if ($this->events) {
            $ab = array();
            foreach ($this->events as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['events'] = $ab;
        }
        if ($this->places) {
            $ab = array();
            foreach ($this->places as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['places'] = $ab;
        }
        if ($this->documents) {
            $ab = array();
            foreach ($this->documents as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['documents'] = $ab;
        }
        if ($this->collections) {
            $ab = array();
            foreach ($this->collections as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['collections'] = $ab;
        }
        if ($this->fields) {
            $ab = array();
            foreach ($this->fields as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['fields'] = $ab;
        }
        if ($this->recordDescriptors) {
            $ab = array();
            foreach ($this->recordDescriptors as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['recordDescriptors'] = $ab;
        }
        return $a;
    }


    /**
     * Initializes this Gedcomx from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        parent::initFromArray($o);
        if (isset($o['lang'])) {
            $this->lang = $o["lang"];
        }
        if (isset($o['description'])) {
            $this->descriptionRef = $o["description"];
        }
        if (isset($o['profile'])) {
            $this->profile = $o["profile"];
        }
        if (isset($o['attribution'])) {
                $this->attribution = new \Gedcomx\Common\Attribution($o["attribution"]);
        }
        $this->persons = array();
        if (isset($o['persons'])) {
            foreach ($o['persons'] as $i => $x) {
                    $this->persons[$i] = new \Gedcomx\Conclusion\Person($x);
            }
        }
        $this->relationships = array();
        if (isset($o['relationships'])) {
            foreach ($o['relationships'] as $i => $x) {
                    $this->relationships[$i] = new \Gedcomx\Conclusion\Relationship($x);
            }
        }
        $this->sourceDescriptions = array();
        if (isset($o['sourceDescriptions'])) {
            foreach ($o['sourceDescriptions'] as $i => $x) {
                    $this->sourceDescriptions[$i] = new \Gedcomx\Source\SourceDescription($x);
            }
        }
        $this->agents = array();
        if (isset($o['agents'])) {
            foreach ($o['agents'] as $i => $x) {
                    $this->agents[$i] = new \Gedcomx\Agent\Agent($x);
            }
        }
        $this->events = array();
        if (isset($o['events'])) {
            foreach ($o['events'] as $i => $x) {
                    $this->events[$i] = new \Gedcomx\Conclusion\Event($x);
            }
        }
        $this->places = array();
        if (isset($o['places'])) {
            foreach ($o['places'] as $i => $x) {
                    $this->places[$i] = new \Gedcomx\Conclusion\PlaceDescription($x);
            }
        }
        $this->documents = array();
        if (isset($o['documents'])) {
            foreach ($o['documents'] as $i => $x) {
                    $this->documents[$i] = new \Gedcomx\Conclusion\Document($x);
            }
        }
        $this->collections = array();
        if (isset($o['collections'])) {
            foreach ($o['collections'] as $i => $x) {
                    $this->collections[$i] = new \Gedcomx\Records\Collection($x);
            }
        }
        $this->fields = array();
        if (isset($o['fields'])) {
            foreach ($o['fields'] as $i => $x) {
                    $this->fields[$i] = new \Gedcomx\Records\Field($x);
            }
        }
        $this->recordDescriptors = array();
        if (isset($o['recordDescriptors'])) {
            foreach ($o['recordDescriptors'] as $i => $x) {
                    $this->recordDescriptors[$i] = new \Gedcomx\Records\RecordDescriptor($x);
            }
        }
    }
}
