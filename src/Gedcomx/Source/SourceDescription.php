<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx\Source;

/**
 * Represents a description of a source.
 */
class SourceDescription extends \Gedcomx\Links\HypermediaEnabledData 
{
    
    /**
     * The URI (if applicable) of the actual source.
     */
    private $about;
    /**
     * Hint about the media (MIME) type of the resource being described.
     */
    private $mediaType;
    /**
     * The type of the resource being described.
     */
    private $resourceType;

    /**
     * The bibliographic citations for this source.
     */
    private $citations;
    /**
     * A reference to the entity that mediates access to the described source.
     */
    private $mediator;
    /**
     * References to any sources to which this source is related (usually applicable to sources that are derived from or contained in another source).
     */
    private $sources;
    /**
     * A reference to the analysis document explaining the analysis that went into this description of the source.
     */
    private $analysis;
    /**
     * A reference to the source that contains this source.
     */
    private $componentOf;
    /**
     * A list of titles for this source.
     */
    private $titles;
    /**
     * A label for the title of this description.
     */
    private $titleLabel;
    /**
     * Notes about a source.
     */
    private $notes;
    /**
     * The attribution metadata for this source description.
     */
    private $attribution;
    /**
     * A sort key to be used in determining the position of this source relative to other sources in the same collection.
     */
    private $sortKey;
    /**
     * Human-readable descriptions of the source.
     */
    private $description;
    /**
     * The list of identifiers for the source.
     */
    private $identifiers;
    /**
     * The date the source was created.
     */
    private $created;
    /**
     * The date the source was last modified.
     */
    private $modified;
    /**
     * Declarations of the coverage of the source.
     */
    private $coverage;
    /**
     * The rights for this source.
     */
    private $rights;
    /**
     * The fields that are applicable to the resource being described.
     */
    private $fields;
    /**
     * Reference to an agent describing the repository in which the source is found.
     */
    private $repository;
    /**
     * Reference to a descriptor of fields and type of data that can be expected to be extracted from the source.
     */
    private $descriptorRef;

    /**
     * Constructs a SourceDescription from a (parsed) JSON hash
     */
    public function __construct($o = null) {
      if( $o ) {
        $this->initFromArray($o);
      }
    }

    /**
     * The URI (if applicable) of the actual source.
     */
    public function getAbout() {
      return $this->about;
    }

    /**
     * The URI (if applicable) of the actual source.
     */
    public function setAbout($about) {
      $this->about = $about;
    }
    /**
     * Hint about the media (MIME) type of the resource being described.
     */
    public function getMediaType() {
      return $this->mediaType;
    }

    /**
     * Hint about the media (MIME) type of the resource being described.
     */
    public function setMediaType($mediaType) {
      $this->mediaType = $mediaType;
    }
    /**
     * The type of the resource being described.
     */
    public function getResourceType() {
      return $this->resourceType;
    }

    /**
     * The type of the resource being described.
     */
    public function setResourceType($resourceType) {
      $this->resourceType = $resourceType;
    }
    /**
     * The bibliographic citations for this source.
     */
    public function getCitations() {
      return $this->citations;
    }

    /**
     * The bibliographic citations for this source.
     */
    public function setCitations($citations) {
      $this->citations = $citations;
    }
    /**
     * A reference to the entity that mediates access to the described source.
     */
    public function getMediator() {
      return $this->mediator;
    }

    /**
     * A reference to the entity that mediates access to the described source.
     */
    public function setMediator($mediator) {
      $this->mediator = $mediator;
    }
    /**
     * References to any sources to which this source is related (usually applicable to sources that are derived from or contained in another source).
     */
    public function getSources() {
      return $this->sources;
    }

    /**
     * References to any sources to which this source is related (usually applicable to sources that are derived from or contained in another source).
     */
    public function setSources($sources) {
      $this->sources = $sources;
    }
    /**
     * A reference to the analysis document explaining the analysis that went into this description of the source.
     */
    public function getAnalysis() {
      return $this->analysis;
    }

    /**
     * A reference to the analysis document explaining the analysis that went into this description of the source.
     */
    public function setAnalysis($analysis) {
      $this->analysis = $analysis;
    }
    /**
     * A reference to the source that contains this source.
     */
    public function getComponentOf() {
      return $this->componentOf;
    }

    /**
     * A reference to the source that contains this source.
     */
    public function setComponentOf($componentOf) {
      $this->componentOf = $componentOf;
    }
    /**
     * A list of titles for this source.
     */
    public function getTitles() {
      return $this->titles;
    }

    /**
     * A list of titles for this source.
     */
    public function setTitles($titles) {
      $this->titles = $titles;
    }
    /**
     * A label for the title of this description.
     */
    public function getTitleLabel() {
      return $this->titleLabel;
    }

    /**
     * A label for the title of this description.
     */
    public function setTitleLabel($titleLabel) {
      $this->titleLabel = $titleLabel;
    }
    /**
     * Notes about a source.
     */
    public function getNotes() {
      return $this->notes;
    }

    /**
     * Notes about a source.
     */
    public function setNotes($notes) {
      $this->notes = $notes;
    }
    /**
     * The attribution metadata for this source description.
     */
    public function getAttribution() {
      return $this->attribution;
    }

    /**
     * The attribution metadata for this source description.
     */
    public function setAttribution($attribution) {
      $this->attribution = $attribution;
    }
    /**
     * A sort key to be used in determining the position of this source relative to other sources in the same collection.
     */
    public function getSortKey() {
      return $this->sortKey;
    }

    /**
     * A sort key to be used in determining the position of this source relative to other sources in the same collection.
     */
    public function setSortKey($sortKey) {
      $this->sortKey = $sortKey;
    }
    /**
     * Human-readable descriptions of the source.
     */
    public function getDescription() {
      return $this->description;
    }

    /**
     * Human-readable descriptions of the source.
     */
    public function setDescription($description) {
      $this->description = $description;
    }
    /**
     * The list of identifiers for the source.
     */
    public function getIdentifiers() {
      return $this->identifiers;
    }

    /**
     * The list of identifiers for the source.
     */
    public function setIdentifiers($identifiers) {
      $this->identifiers = $identifiers;
    }
    /**
     * The date the source was created.
     */
    public function getCreated() {
      return $this->created;
    }

    /**
     * The date the source was created.
     */
    public function setCreated($created) {
      $this->created = $created;
    }
    /**
     * The date the source was last modified.
     */
    public function getModified() {
      return $this->modified;
    }

    /**
     * The date the source was last modified.
     */
    public function setModified($modified) {
      $this->modified = $modified;
    }
    /**
     * Declarations of the coverage of the source.
     */
    public function getCoverage() {
      return $this->coverage;
    }

    /**
     * Declarations of the coverage of the source.
     */
    public function setCoverage($coverage) {
      $this->coverage = $coverage;
    }
    /**
     * The rights for this source.
     */
    public function getRights() {
      return $this->rights;
    }

    /**
     * The rights for this source.
     */
    public function setRights($rights) {
      $this->rights = $rights;
    }
    /**
     * The fields that are applicable to the resource being described.
     */
    public function getFields() {
      return $this->fields;
    }

    /**
     * The fields that are applicable to the resource being described.
     */
    public function setFields($fields) {
      $this->fields = $fields;
    }
    /**
     * Reference to an agent describing the repository in which the source is found.
     */
    public function getRepository() {
      return $this->repository;
    }

    /**
     * Reference to an agent describing the repository in which the source is found.
     */
    public function setRepository($repository) {
      $this->repository = $repository;
    }
    /**
     * Reference to a descriptor of fields and type of data that can be expected to be extracted from the source.
     */
    public function getDescriptorRef() {
      return $this->descriptorRef;
    }

    /**
     * Reference to a descriptor of fields and type of data that can be expected to be extracted from the source.
     */
    public function setDescriptorRef($descriptorRef) {
      $this->descriptorRef = $descriptorRef;
    }
    /**
     * Returns the associative array for this SourceDescription
     */
    public function toArray() {
      $a = parent::toArray();
      if( $this->about ) {
            $a["about"] = $this->about;
      }
      if( $this->mediaType ) {
            $a["mediaType"] = $this->mediaType;
      }
      if( $this->resourceType ) {
            $a["resourceType"] = $this->resourceType;
      }
      if( $this->citations ) {
        $ab = array();
        foreach( $this->citations as $i => $x ) {
              $ab[$i] = $x->toArray();
        }
        $a['citations'] = $ab;
      }
      if( $this->mediator ) {
            $a["mediator"] = $this->mediator->toArray();
      }
      if( $this->sources ) {
        $ab = array();
        foreach( $this->sources as $i => $x ) {
              $ab[$i] = $x->toArray();
        }
        $a['sources'] = $ab;
      }
      if( $this->analysis ) {
            $a["analysis"] = $this->analysis->toArray();
      }
      if( $this->componentOf ) {
            $a["componentOf"] = $this->componentOf->toArray();
      }
      if( $this->titles ) {
        $ab = array();
        foreach( $this->titles as $i => $x ) {
              $ab[$i] = $x->toArray();
        }
        $a['titles'] = $ab;
      }
      if( $this->titleLabel ) {
            $a["titleLabel"] = $this->titleLabel->toArray();
      }
      if( $this->notes ) {
        $ab = array();
        foreach( $this->notes as $i => $x ) {
              $ab[$i] = $x->toArray();
        }
        $a['notes'] = $ab;
      }
      if( $this->attribution ) {
            $a["attribution"] = $this->attribution->toArray();
      }
      if( $this->sortKey ) {
            $a["sortKey"] = $this->sortKey;
      }
      if( $this->description ) {
        $ab = array();
        foreach( $this->description as $i => $x ) {
              $ab[$i] = $x->toArray();
        }
        $a['description'] = $ab;
      }
      if( $this->identifiers ) {
        $ab = array();
        foreach( $this->identifiers as $i => $x ) {
              $ab[$i] = $x->toArray();
        }
        $a['identifiers'] = $ab;
      }
      if( $this->created ) {
            $a["created"] = $this->created;
      }
      if( $this->modified ) {
            $a["modified"] = $this->modified;
      }
      if( $this->coverage ) {
        $ab = array();
        foreach( $this->coverage as $i => $x ) {
              $ab[$i] = $x->toArray();
        }
        $a['coverage'] = $ab;
      }
      if( $this->rights ) {
        $ab = array();
        foreach( $this->rights as $i => $x ) {
              $ab[$i] = $x;
        }
        $a['rights'] = $ab;
      }
      if( $this->fields ) {
        $ab = array();
        foreach( $this->fields as $i => $x ) {
              $ab[$i] = $x->toArray();
        }
        $a['fields'] = $ab;
      }
      if( $this->repository ) {
            $a["repository"] = $this->repository->toArray();
      }
      if( $this->descriptorRef ) {
            $a["descriptor"] = $this->descriptorRef->toArray();
      }
      return $a;
    }


    /**
     * Initializes this SourceDescription from an associative array
     */
    public function initFromArray($o) {
      parent::initFromArray($o);
      if( isset($o['about']) ) {
            $this->about = $o["about"];
      }
      if( isset($o['mediaType']) ) {
            $this->mediaType = $o["mediaType"];
      }
      if( isset($o['resourceType']) ) {
            $this->resourceType = $o["resourceType"];
      }
      $this->citations = array();
      if( isset($o['citations']) ) {
        foreach( $o['citations'] as $i => $x ) {
              $this->citations[$i] = new \Gedcomx\Source\SourceCitation($x);
        }
      }
      if( isset($o['mediator']) ) {
            $this->mediator = new \Gedcomx\Common\ResourceReference($o["mediator"]);
      }
      $this->sources = array();
      if( isset($o['sources']) ) {
        foreach( $o['sources'] as $i => $x ) {
              $this->sources[$i] = new \Gedcomx\Source\SourceReference($x);
        }
      }
      if( isset($o['analysis']) ) {
            $this->analysis = new \Gedcomx\Common\ResourceReference($o["analysis"]);
      }
      if( isset($o['componentOf']) ) {
            $this->componentOf = new \Gedcomx\Source\SourceReference($o["componentOf"]);
      }
      $this->titles = array();
      if( isset($o['titles']) ) {
        foreach( $o['titles'] as $i => $x ) {
              $this->titles[$i] = new \Gedcomx\Common\TextValue($x);
        }
      }
      if( isset($o['titleLabel']) ) {
            $this->titleLabel = new \Gedcomx\Common\TextValue($o["titleLabel"]);
      }
      $this->notes = array();
      if( isset($o['notes']) ) {
        foreach( $o['notes'] as $i => $x ) {
              $this->notes[$i] = new \Gedcomx\Common\Note($x);
        }
      }
      if( isset($o['attribution']) ) {
            $this->attribution = new \Gedcomx\Common\Attribution($o["attribution"]);
      }
      if( isset($o['sortKey']) ) {
            $this->sortKey = $o["sortKey"];
      }
      $this->description = array();
      if( isset($o['description']) ) {
        foreach( $o['description'] as $i => $x ) {
              $this->description[$i] = new \Gedcomx\Common\TextValue($x);
        }
      }
      $this->identifiers = array();
      if( isset($o['identifiers']) ) {
        foreach( $o['identifiers'] as $i => $x ) {
              $this->identifiers[$i] = new \Gedcomx\Conclusion\Identifier($x);
        }
      }
      if( isset($o['created']) ) {
            $this->created = $o["created"];
      }
      if( isset($o['modified']) ) {
            $this->modified = $o["modified"];
      }
      $this->coverage = array();
      if( isset($o['coverage']) ) {
        foreach( $o['coverage'] as $i => $x ) {
              $this->coverage[$i] = new \Gedcomx\Source\Coverage($x);
        }
      }
      $this->rights = array();
      if( isset($o['rights']) ) {
        foreach( $o['rights'] as $i => $x ) {
              $this->rights[$i] = $x;
        }
      }
      $this->fields = array();
      if( isset($o['fields']) ) {
        foreach( $o['fields'] as $i => $x ) {
              $this->fields[$i] = new \Gedcomx\Records\Field($x);
        }
      }
      if( isset($o['repository']) ) {
            $this->repository = new \Gedcomx\Common\ResourceReference($o["repository"]);
      }
      if( isset($o['descriptor']) ) {
            $this->descriptorRef = new \Gedcomx\Common\ResourceReference($o["descriptor"]);
      }
    }
}
